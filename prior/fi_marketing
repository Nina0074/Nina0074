create table analyst_ws.kcfi as
    select
        a.TAX_YEAR
        ,a.metric_id
        , d.REPORTING_DATE
        , d.TAX_DATE
        , case when d.reporting_date <= current_date - interval '1' day then 1 else 0 end as YTD_FLAG
        , case when (a.tax_year = '2020' or a.tax_year = '2021') and date(a.multifiler_timestamp) >= current_date then 1
            when a.multifiler_timestamp is null then 1
            else 0 end as CORE_FLAG_YTD -- we don't use this and always set this as "ALL" in the tableau filter
        , case when (a.tax_year = '2020' or a.tax_year = '2021')  and date(a.multi_device_timestamp)>= current_date  and a.visitor_type = 'Multi-Device' and a.first_multi_device_flag = false then 1
            when a.visitor_type <> 'Multi-Device'  then 1
            when a.visitor_type = 'Multi-Device' and a.first_multi_device_flag = true then 1
            when a.visitor_type is null then 1
            else 0 end as REMOVE_MULTIDEVICE_FLAG_YTD -- to remove traffic that is associated with different devices but same neauth; always set = 1 in the dash
        , DEVICE_TYPE
        , APP_TYPE
        , TTO_SEGMENT_HYBRID -- new vs existing, same as how product defines
        , CUSTOMER_TYPE -- based on SSN, only available for completed cust
        , a.CID
        , case when date(first_start_date_adj) <= current_date - interval '1' day or product is null then product
            else 'Not Started' end as SKU
        , case when date(first_start_date_adj) <= current_date - interval '1' day or product_rollup is null then product_rollup
            else 'Not Started' end as PRODUCT_ROLLUP
        , case when tto_segment_hybrid in ('New','Skip Year') then 'New'
          when tto_segment_hybrid in ('Veteran Returning','1st Year Returning') then 'Existing' else 'null' end as NEW_EXISTING
        , c.SOURCE_
        , c.Partner
        , c.COMPANY
        , c.PRIORITY_CODE
        , b.CHANNEL_GROUP
        , SESSION_AUTH_TYPE
        , POST_COMPLETE_SESSION_FLAG
        -------add Latino_flag (should be null for session and traffic)
        , case when metric_type in ('session','traffic') then cast(null as boolean)
             else cast(coalesce(a.primary_filer_latino_flag, '0') as boolean) end as primary_filer_latino_flag
        , 'A FI Channel' as Type     
        --agg.primary_filer_latino_flag --end as primary_filer_latino_flag
        , sum(case when metric_type = 'session' then 1 else 0 end) as VISITS -- formerly known as session
        , sum(case when metric_type = 'traffic' then 1 else 0 end) as TRAFFIC
        
        , count(distinct case when metric_type = 'neauth' then metric_id end) as NEAUTHS
        , count(distinct case when metric_type = 'neauth' and a.vauth_flag = true then metric_id end) as VAUTHS
        , count(distinct case when metric_type = 'start' and a.product not like '%FFA%' then metric_id end) as STARTS
        
        /* Correcting the Duplicates Issue as per email from Kristina Cornejo
        --, sum(case when metric_type = 'neauth' then 1 else 0 end) as NEAUTHS
        --, sum(case when vauth_flag = true then 1 else 0 end) as VAUTHS
        --, sum(case when metric_type = 'start' then 1 else 0 end) as STARTS
        */
        
        , cast(0 as bigint) as COMPLETES
        , cast(0 as double) as REVENUE
        , sum(case when metric_type = 'complete' then a.ltv_prediction end) as LTV
    from dlprd.tax_rpt.agg_marketing_analytics as a
    inner join dlprd.tax_src.dim_campaign_global as b 
        ON cast(a.campaign_id as varchar) = cast(b.id as varchar)
    inner join dlprd.cgan_ustax_published.helper_dnc_partner_codes as c 
        ON cast(b.CID4 as varchar) = cast(c.priority_code as varchar)
    inner join (select distinct tax_year, tax_pt_date as tax_date, reporting_date from dlprd.common_dm.dim_cg_date) as d
        ON date(a.date) = date(d.tax_date)
    /*left join                                                                                    --latino flag
        (select distinct cast(auth_id as varchar) auth_id,
        tax_year,
        primary_filer_latino_flag  --(should be null for session and traffic)
        from consumer_source.src_ml_auth_id_latino) lat
        on a.metric_id = lat.auth_id
        and a.tax_year = lat.tax_year*/
    where a.tax_year IN ('2020', '2021')     --in (2019,2020)
        and b.channel_group = 'FI Channel' -- FI credited CID
        and (a.tax_year IN ('2020','2021') and a.ffa_timestamp is null) -- removing nonFFA
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24;
    
    
    
-- ty20 email CID -----------------------------------------------------------------------------------------------------
insert /* + direct */ into analyst_ws.kcfi
    select
        a.TAX_YEAR
        ,a.metric_id
        , d.REPORTING_DATE
        , d.TAX_DATE
        , 1 as YTD_FLAG
        , case when a.multifiler_timestamp is null then 1
            else 0 end as CORE_FLAG_YTD -- we don't use this and always set this as "ALL" in the tableau filter
        , case when a.visitor_type <> 'Multi-Device'  then 1
            when a.visitor_type = 'Multi-Device' and a.first_multi_device_flag = true then 1
            when a.visitor_type is null then 1
            else 0 end as REMOVE_MULTIDEVICE_FLAG_YTD -- to remove traffic that is associated with different devices but same neauth; always set = 1 in the dash
        , DEVICE_TYPE
        , APP_TYPE
        , TTO_SEGMENT_HYBRID -- new vs existing, same as how product defines
        , CUSTOMER_TYPE -- based on SSN, only available for completed cust
        , a.CID
        , case when product is not null then product
            else 'Not Started' end as SKU
        , case when product_rollup is not null then product_rollup
            else 'Not Started' end as PRODUCT_ROLLUP
        , case when tto_segment_hybrid in ('New','Skip Year') then 'New'
          when tto_segment_hybrid in ('Veteran Returning','1st Year Returning') then 'Existing' else 'null' end as NEW_EXISTING
        , c.SOURCE_
        , c.Partner
        , c.COMPANY
        , c.PRIORITY_CODE
        , b.CHANNEL_GROUP
        , SESSION_AUTH_TYPE
        , POST_COMPLETE_SESSION_FLAG
        -------add Latino_flag (should be null for session and traffic)
        --, case when metric_type in ('session','traffic') then cast(null as boolean)
        --     else cast(coalesce(a.primary_filer_latino_flag, '0') as boolean) end as primary_filer_latino_flag
        --, false as primary_filer_latino_flag
        , case when primary_filer_latino_flag = '1' and metric_type not in ('session','traffic') then true
          else false end
          as primary_filer_latino_flag
        , 'B DR' as Type
        , sum(case when metric_type = 'session' then 1 else 0 end) as VISITS -- formerly known as session
        , sum(case when metric_type = 'traffic' then 1 else 0 end) as TRAFFIC
        
        , count(distinct case when metric_type = 'neauth' then metric_id end) as NEAUTHS
        , count(distinct case when metric_type = 'neauth' and a.vauth_flag = true then metric_id end) as VAUTHS
        , count(distinct case when metric_type = 'start' and a.product not like '%FFA%' then metric_id end) as STARTS
        
        /* 
        , sum(case when metric_type = 'neauth' then 1 else 0 end) as NEAUTHS
        , sum(case when vauth_flag = true then 1 else 0 end) as VAUTHS
        , sum(case when metric_type = 'start' then 1 else 0 end) as STARTS
        */
        
        , cast(0 as bigint) as COMPLETES
        , cast(0 as double) as REVENUE
        , sum(case when metric_type = 'complete' then a.ltv_prediction end) as LTV
    from dlprd.tax_rpt.agg_marketing_analytics as a
    inner join dlprd.tax_src.dim_campaign_global as b
        on cast(a.campaign_id as varchar) = cast(b.id as varchar)
    inner join dlprd.cgan_ustax_published.helper_dnc_partner_codes as c
        on cast(b.CID8 as varchar) = cast(c.priority_code as varchar) -- for em cid, link source code to source code CHANGED TO PRIORITY CODE IN TY20
    inner join (select distinct tax_year, tax_pt_date as tax_date, reporting_date from dlprd.common_dm.dim_cg_date) as d
        on date(a.date) = date(d.tax_date)
    /*left join                                                     --latino flag
          (select distinct auth_id::varchar,
            tax_year,
            primary_filer_latino_flag     -- --(should be null for session and traffic)
             from consumer_source.src_ml_auth_id_latino) lat
            on a.metric_id = lat.auth_id
            and a.tax_year = lat.tax_year*/
    where a.tax_year IN ('2020', '2021') -- tax year
                    and b.channel_group = 'DR' -- EM credited CID
                    and (a.tax_year IN ('2020', '2021') and a.ffa_timestamp is null) -- removing FFA
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24;
    
    
    
    
--COMPLETES ----------------------------------------------------------------------------------------------
drop table if exists analyst_ws.kcfib;
create table if not exists analyst_ws.kcfib as
select
    fact.auth_id
    , sub.tax_year
    , y.priority_code as credit_priority_code
    , sub.order_timestamp
    , rank() over(partition by sub.tax_year, fact.auth_id order by sub.order_timestamp) as rank
from dlprd.tax_dm.sub_taxorder_completed_ranked sub
left join dlprd.tax_dm.fact_taxorder fact
    on sub.taxorder_id = fact.taxorder_id
left join dlprd.tax_dm.DIM_PRIORITY_CODE y
    ON fact.CREDIT_PRIORITY_ID = y.PRIORITY_ID
where sub.tax_year in (2020, 2021)
    and fact.auth_id is not null;

-- only taking the first order
drop table if exists analyst_ws.kcfib2;
create table if not exists analyst_ws.kcfib2 as
select *
from analyst_ws.kcfib
where rank = 1;


insert into analyst_ws.kcfi
select
    a.tax_year
    ,a.metric_id
    , d.REPORTING_DATE
    , d.TAX_DATE
    , case when d.tax_year = 2021 then 1 when (d.tax_year = 2020 and d.reporting_date < current_date) then 1 else 0 end as YTD_FLAG
    , case when d.tax_year = 2021 and a.multifiler_timestamp is null then 1 when d.tax_year = 2020 and a.multifiler_timestamp >= current_date
      then 1 else 0 end as CORE_FLAG_YTD -- we don't use this and always set this as "ALL" in the tableau filter
    , 1 as REMOVE_MULTIDEVICE_FLAG_YTD -- to remove traffic that is associated with different devices but same neauth; always set = 1 in the dash
    , DEVICE_TYPE
    , APP_TYPE
    , TTO_SEGMENT_HYBRID -- new vs existing, same as how product defines
    , CUSTOMER_TYPE -- based on SSN, only available for completed cust
    , a.CID
    , case when a.product is not null then a.product
        else 'Not Started' end as SKU
    , case when a.product_rollup is not null then a.product_rollup
        else 'Not Started' end as PRODUCT_ROLLUP
    , case when tto_segment_hybrid in ('New','Skip Year') then 'New'
      when tto_segment_hybrid in ('Veteran Returning','1st Year Returning') then 'Existing' else 'null' end as NEW_EXISTING
    , c.SOURCE_
    , c.Partner
    , c.COMPANY
    , c.PRIORITY_CODE
    , a.CHANNEL_GROUP
    , cast(null as varchar) as SESSION_AUTH_TYPE
    , cast(null as boolean) as POST_COMPLETE_SESSION_FLAG
    --, case when metric_type in ('session','traffic') then cast(false as boolean)
        --else cast(coalesce(a.primary_filer_latino_flag, false) as boolean) end as primary_filer_latino_flag
    , case when primary_filer_latino_flag = '1' and metric_type not in ('session','traffic') then true
      else false end
    as primary_filer_latino_flag
    , 'C Completes' as Type
    , cast(null as bigint) as VISITS -- formerly known as session
    , cast(null as bigint) as TRAFFIC
    , cast(null as bigint) as NEAUTHS
    , cast(null as bigint) as VAUTHS
    , cast(null as bigint) as STARTS
    , count(distinct b.auth_id) as COMPLETES
    , sum(total_revenue) as REVENUE
    , cast(0 as double) as LTV
from (select * from dlprd.tax_rpt.agg_marketing_analytics where metric_type = 'complete') as a
inner join analyst_ws.kcfib2 as b
    on cast(a.metric_id as varchar) = cast(b.auth_id as varchar)
    and cast(a.tax_year as varchar) = cast(b.tax_year as varchar)
inner join  dlprd.cgan_ustax_published.helper_dnc_partner_codes as c
        on cast(b.credit_priority_code as varchar) = cast(c.priority_code as varchar)
--inner join ctg_analytics.dim_tax_date as d
--        on ctg_analytics.get_tax_date_id(b.order_timestamp) = d.tax_date_id and d.tax_year in (2019,2020)
inner join (select distinct tax_year, tax_pt_date as tax_date, reporting_date from dlprd.common_dm.dim_cg_date) as d
    on date(b.order_timestamp) = date(d.tax_date) and d.tax_year in (2020,2021)
     /*left join                                                                                            --latino flag
          (select distinct auth_id::varchar,
                                    tax_year,
                                    primary_filer_latino_flag                     --(should be null for session and traffic)
             from consumer_source.src_ml_auth_id_latino) lat
            on a.metric_id = lat.auth_id
            and a.tax_year = lat.tax_year*/
where (a.tax_year in ('2020','2021') and a.ffa_timestamp is null) -- removing nonFFA
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24;
        
    
    
    
    
    
    
